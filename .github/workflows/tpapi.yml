name: Build and Deploy TpApi

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: springboot
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # Checkout le code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 21

      # Configuration de Maven
      - name: Setup Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-


      # Configurer JDBC avec les secrets
      - name: Setup Database Connection
        env:
          DB_URL: jdbc:mysql://127.0.0.1:3306/springboot
          DB_USER: root
          DB_PASSWORD: root
        run: |
          echo "Running DB Scripts"
          mysql -h 127.0.0.1 -P 3306 -u root -proot springboot < ./script.sql

      # Installer les dépendances du projet Java
      - name: Build Java Project with Maven
        run: mvn clean install
        
      # SonarQube Scan
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Mathaus-afpa_TpApi


  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout du code
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuration de Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Connexion à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build et Push de l’image Docker avec cache
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/tpapi:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/tpapi:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/tpapi:cache,mode=max